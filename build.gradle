plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.flywaydb.flyway' version '9.22.3' // Add the Flyway plugin
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {

    // Core Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // JWT Library
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // ✨ Database Versioning with Flyway
    implementation 'org.flywaydb:flyway-core'
    // ✨ PostgreSQL Driver
    runtimeOnly 'org.postgresql:postgresql'

    // ✨ Bonus: Security (Authentication & Authorization)
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // ✨ Bonus: API Documentation (Swagger/OpenAPI)
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

    // ✨ Bonus: Caching with Redis
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    // For test containers to spin up a DB during tests
    testImplementation 'org.testcontainers:postgresql'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

// This block configures the Flyway Gradle plugin directly
flyway {
    // Load properties from the same file Spring Boot uses
    def props = new Properties()
    file("src/main/resources/application.properties").withInputStream {
        props.load(it)
    }

    // Assign the properties to the Flyway configuration
    url = props.getProperty("spring.datasource.url")
    user = props.getProperty("spring.datasource.username")
    password = props.getProperty("spring.datasource.password")

    cleanDisabled = false
}

tasks.named('test') {
    useJUnitPlatform()
}
